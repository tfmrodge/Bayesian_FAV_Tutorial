# Code Review: Tim Rodgers FAV Estimation Tutorial
# January 21st, 2021


# GENERAL COMMENTS 

-----
I could be wrong, but it seems that the two Jupyter Notebook files are identical.
-----

-----
The content requires a fairly deep understanding of the methodology. I would 
not be surprised if most readers are not very familiar with Bayesian statistics, 
MCMC, etc. Moreover, trying to understand the approach from markdown text can 
be difficult. These limitations highlight the importance of providing detailed
explanations of the approach and related assumptions in your manuscript or SI, 
including any relevant equations. A user would then be able to easily map the
information in the tutorial to the manusript for more detail. 
-----

-----
It seems that full documentation of the input files would be essential for 
users. The average user may not have time to learn Bayesian statistics and/or 
Python in sufficient depth and would instead wish to simply use your existing 
interface with their own phys-chem property data. In this case, it would seem 
necessary for them to understand how to interpret and modify the input files, 
and then simply run the existing code. 
-----

-----
Along similar lines, I would migrate the bulk of the code into a separate module 
(.PY file), and then just have a simple user interface in a single .IPYNB file. 
The module doesn't have to be fancy, just wrapping the existing code into four or 
so functions that can be called externally in the Jupyter Notebook interface. Then, 
the average user would only have to navigate a single notebook with only a handful 
of cells. I imagine that most of the Python expressions are irrelevant to the 
average user.
-----

-----
You might even consider recording a supplemental tutorial video file using Zoom 
with the share-screen feature. You could walk through step-by-step and explain
how to use, interpret, and modify the code in maybe 30 minutes. 
-----

-----
I would suggest providing full citations for your references in a markdown cell. 
-----

-----
Some of the libraries (e.g., "uncertainties") are not included in the standard
Anaconda distribution. As such, I would suggest providing instructions for users
on where to find these libraries and how to install them. 
-----

# SUGGESTIONS FOR PYTHON CODE 

-----
I would recommend reading PEP-8 and trying to adhere to their style guidelines 
if you haven't done so already. https://www.python.org/dev/peps/pep-0008/.
-----

-----
I would suggest using large headings to separate your primary sections of code. 
In Jupyter markdown, headings can be created using the "#" symbol prior to your
text. The more of these symbols you use, the smaller the heading will be, 
e.g., # > ## > ###. 
-----

-----
Whenever possible, I would highly suggest using a loop or comprehension to 
avoid repeating similar lines of code. The goal is to use a few lines as 
possible to improve readability. Moreover, Pandas indexing should accept a
list, so I think you could define variable names in a list first and then 
broadcast a given change as follows:

	var_names = ['dUA','dUW', etc. ]
	FAVs.loc[:, var_names] = unumpy.uarray(0,0)

If that doesn't work, you should be able to use a simple loop:

	for vn in var_names:
		FAVs.loc[:, vn] = unumpy.uarray(0,0)

Rather than,

	FAVs.loc[:,'dUA']=unumpy.uarray(0,0) 
	FAVs.loc[:,'dUW']=unumpy.uarray(0,0) 
	... etc. 
-----

-----
I would suggest using strings instead of integers whenever possible when 
working with arguments of pandas functions. This can improve readability
and avoid bugs if locations of data tend to change more frequently than 
variable names. For example,
 
	LDV = pd.read_csv('...', index_col = 'Compound') 
vs. 	LDV = pd.read_csv('...', index_col = 2)
	
-----

-----
In some cases, the code could benefit from more-explicit variable names. The
goal here is to make the code self-documenting and reduce the need for writing
comments where the code can speak for itself. For example, compare the 
following.

	- chem_property_names[i] vs. colnames[i]
	- for comp in compounds vs. for comp in comps
	- uLDV.loc[where_less_equal_four] vs. uLDV.loc[mask]
-----

-----
When looping through columns and skipping certain columns, using a conditional
statement seems a bit overkill. You may be able to first define the column names 
in a list before the loop, or define the indices using a list comprehension. 
-----

-----
Whenever I see a long conditional statement or try-except statement, I wonder
if there is a better way. With the enth6_model, you could first define a dictionary 
mapping of variable names to their associated distribution parameter values, and 
then use a single for loop with zip() to call the functions with their appropriate
parameters. 
-----

-----
In Python 3+, linebreak characters are not needed if the expression is wrapped 
in a list, tuple, or function call. Some programmers even discourage the use of 
linebreak characters. For example, 

	# This expression should be equivalent to the following one. 
	base_sd = max([
    		abs(variable1 - variable2 - variable3).n, 
    		abs(variable4 - variable5 + variable6).n])

	base_sd = max([abs(variable1 - variable2 - variable3).n,\
            	abs(variable4 - variable5 + variable6).n])
-----


